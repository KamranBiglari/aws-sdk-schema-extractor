name: Extract AWS Schemas

on:
  # Run daily to check for updates
  schedule:
    - cron: '0 6 * * *'  # 6 AM UTC daily
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Run on pushes to main (for testing)
  push:
    branches: [ main ]
    paths: 
      - 'src/**'
      - 'package.json'
      - '.github/workflows/**'

jobs:
  extract-schemas:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Clone botocore repository
      run: |
        echo "üîÑ Cloning latest botocore..."
        git clone --depth 1 https://github.com/boto/botocore.git
        echo "üìã Botocore version: $(cd botocore && git rev-parse --short HEAD)"
    
    - name: Check if botocore has updates
      id: check-updates
      run: |
        # Get current botocore commit from our record
        CURRENT_COMMIT=""
        if [ -f ".botocore-version" ]; then
          CURRENT_COMMIT=$(cat .botocore-version)
        fi
        
        # Get latest botocore commit
        cd botocore
        LATEST_COMMIT=$(git rev-parse HEAD)
        cd ..
        
        echo "Current: $CURRENT_COMMIT"
        echo "Latest: $LATEST_COMMIT"
        
        if [ "$CURRENT_COMMIT" != "$LATEST_COMMIT" ]; then
          echo "üîÑ Botocore has updates!"
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "commit_short=$(echo $LATEST_COMMIT | cut -c1-8)" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ No botocore updates"
          echo "has_updates=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Extract AWS schemas
      if: steps.check-updates.outputs.has_updates == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
      run: |
        echo "üöÄ Starting schema extraction..."
        export BOTOCORE_DATA_PATH=./botocore/botocore/data
        npm run extract
        
        echo "üìä Extraction statistics:"
        if [ -f "aws-schemas/index.json" ]; then
          echo "Services: $(jq -r '.stats.totalServices' aws-schemas/index.json)"
          echo "Operations: $(jq -r '.stats.totalOperations' aws-schemas/index.json)"
          echo "Successful: $(jq -r '.stats.successfulExtractions' aws-schemas/index.json)"
        fi
    
    - name: Validate extracted schemas
      if: steps.check-updates.outputs.has_updates == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
      run: |
        echo "üîç Validating extracted schemas..."
        npm run validate
    
    - name: Update botocore version record
      if: steps.check-updates.outputs.has_updates == 'true'
      run: |
        echo "${{ steps.check-updates.outputs.latest_commit }}" > .botocore-version
        echo "üìù Updated botocore version record"
    
    - name: Generate release notes
      if: steps.check-updates.outputs.has_updates == 'true'
      id: release-notes
      run: |
        echo "üìù Generating release notes..."
        
        RELEASE_DATE=$(date -u +"%Y-%m-%d")
        BOTOCORE_COMMIT="${{ steps.check-updates.outputs.commit_short }}"
        
        # Count services and commands
        SERVICES_COUNT=$(jq -r '.stats.totalServices' aws-schemas/index.json)
        OPERATIONS_COUNT=$(jq -r '.stats.totalOperations' aws-schemas/index.json)
        SUCCESSFUL_COUNT=$(jq -r '.stats.successfulExtractions' aws-schemas/index.json)
        ARCHIVE_SIZE=$(du -h aws-schemas.zip | cut -f1)
        
        # Create release notes
        cat > release-notes.md << EOF
        # AWS Command Schemas - $RELEASE_DATE
        
        üöÄ **Clean schemas archive with ONLY the schema files**
        
        ## üìä Statistics
        - **Services**: $SERVICES_COUNT
        - **Total Operations**: $OPERATIONS_COUNT  
        - **Successfully Extracted**: $SUCCESSFUL_COUNT
        - **Archive Size**: $ARCHIVE_SIZE
        - **Botocore Version**: \`$BOTOCORE_COMMIT\`
        
        ## üìÅ What's Included
        \`\`\`
        aws-schemas.zip contains:
        ‚îú‚îÄ‚îÄ index.json                    # Main service index
        ‚îú‚îÄ‚îÄ README.md                     # Usage documentation  
        ‚îú‚îÄ‚îÄ elasticache/                  # ElastiCache commands
        ‚îÇ   ‚îú‚îÄ‚îÄ _service-summary.json    # Service overview
        ‚îÇ   ‚îú‚îÄ‚îÄ AddTagsToResourceCommand.json
        ‚îÇ   ‚îî‚îÄ‚îÄ ...
        ‚îú‚îÄ‚îÄ ec2/                          # EC2 commands
        ‚îÇ   ‚îú‚îÄ‚îÄ _service-summary.json
        ‚îÇ   ‚îú‚îÄ‚îÄ RunInstancesCommand.json
        ‚îÇ   ‚îî‚îÄ‚îÄ ...
        ‚îî‚îÄ‚îÄ s3/                           # S3 commands
            ‚îú‚îÄ‚îÄ _service-summary.json
            ‚îú‚îÄ‚îÄ PutObjectCommand.json
            ‚îî‚îÄ‚îÄ ...
        \`\`\`
        
        ## üöÄ Quick Usage
        \`\`\`bash
        # Download and extract
        curl -L https://github.com/yourusername/aws-command-schemas/releases/download/v$RELEASE_DATE/aws-schemas.zip -o schemas.zip
        unzip schemas.zip
        
        # Use in your project
        const schema = require('./elasticache/AddTagsToResourceCommand.json');
        console.log(schema.requiredParameters); // ["ResourceName", "Tags"]
        \`\`\`
        
        ## üéØ Clean Distribution
        - ‚úÖ **No source code** - Only schema files
        - ‚úÖ **No dependencies** - Pure JSON data
        - ‚úÖ **Organized structure** - By AWS service
        - ‚úÖ **Ready to use** - Drop into any project
        
        ---
        *Generated from botocore \`$BOTOCORE_COMMIT\` ‚Ä¢ Archive contains only schema files*
        EOF
        
        echo "release_date=$RELEASE_DATE" >> $GITHUB_OUTPUT
        echo "üìÑ Release notes created"
    
    - name: Create schemas archive
      if: steps.check-updates.outputs.has_updates == 'true'
      run: |
        echo "üì¶ Creating clean schemas archive..."
        
        # Create archive with ONLY aws-schemas/ folder contents
        cd aws-schemas
        zip -r ../aws-schemas.zip .
        cd ..
        
        # Verify archive contents
        echo "üìã Archive contents:"
        unzip -l aws-schemas.zip | head -20
        
        # Get archive size
        ARCHIVE_SIZE=$(du -h aws-schemas.zip | cut -f1)
        echo "üìä Archive size: $ARCHIVE_SIZE"
        
        echo "‚úÖ Clean schemas archive created: aws-schemas.zip"
    
    - name: Commit updated schemas
      if: steps.check-updates.outputs.has_updates == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        echo "üìù Only committing version tracking file (.botocore-version)"
        echo "üì¶ aws-schemas/ will be distributed via releases only"
        
        # Only commit version tracking file
        git add .botocore-version
        
        if git diff --staged --quiet; then
          echo "No version changes to commit"
        else
          git commit -m "üîÑ Update botocore version to ${{ steps.check-updates.outputs.commit_short }}"
          git push
        fi
    
    - name: Create GitHub Release
      if: steps.check-updates.outputs.has_updates == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.release-notes.outputs.release_date }}
        name: AWS Schemas - ${{ steps.release-notes.outputs.release_date }}
        body_path: release-notes.md
        files: |
          aws-schemas.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update README stats
      if: steps.check-updates.outputs.has_updates == 'true'
      run: |
        echo "üìä Updating README with latest stats..."
        
        SERVICES_COUNT=$(jq -r '.stats.totalServices' aws-schemas/index.json)
        OPERATIONS_COUNT=$(jq -r '.stats.totalOperations' aws-schemas/index.json)
        LAST_UPDATE=$(date -u +"%Y-%m-%d %H:%M UTC")
        
        # Update README badges/stats (you can customize this)
        sed -i "s/Total Services: [0-9]*/Total Services: $SERVICES_COUNT/g" README.md
        sed -i "s/Total Operations: [0-9]*/Total Operations: $OPERATIONS_COUNT/g" README.md
        
        # Commit README updates
        if ! git diff --quiet README.md; then
          git add README.md
          git commit -m "üìä Update README stats - $SERVICES_COUNT services, $OPERATIONS_COUNT operations"
          git push
        fi
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Schema extraction failed!"
        echo "Please check the logs and fix any issues."
        
        # Optional: Send notification (Slack, Discord, etc.)
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"‚ùå AWS Schema extraction failed in repository"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Optional: Test schemas in different environments
  test-schemas:
    needs: extract-schemas
    if: needs.extract-schemas.outputs.has_updates == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test schema loading
      run: |
        echo "üß™ Testing schema loading on Node.js ${{ matrix.node-version }}..."
        npm run test
    
    - name: Validate schema format
      run: |
        echo "‚úÖ Validating schema format consistency..."
        npm run validate